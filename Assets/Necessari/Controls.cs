//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Necessari/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Overoll"",
            ""id"": ""5c73dc63-7307-4c8a-8d8a-5bcb6b261b54"",
            ""actions"": [
                {
                    ""name"": ""Moviment"",
                    ""type"": ""Value"",
                    ""id"": ""5d14da67-0fa7-4505-8842-e58063e961db"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftRight Vector"",
                    ""id"": ""88cdd4b7-1b87-434a-99d5-5bece810ba42"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5898eeb9-ffda-4121-9b1d-3e88abeb8d24"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""54ee3556-1a6f-45c0-a16b-8dd78bffd833"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ee4f946f-20bd-4494-9ef2-6bb9623531f8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moviment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Overoll
        m_Overoll = asset.FindActionMap("Overoll", throwIfNotFound: true);
        m_Overoll_Moviment = m_Overoll.FindAction("Moviment", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Overoll
    private readonly InputActionMap m_Overoll;
    private List<IOverollActions> m_OverollActionsCallbackInterfaces = new List<IOverollActions>();
    private readonly InputAction m_Overoll_Moviment;
    public struct OverollActions
    {
        private @Controls m_Wrapper;
        public OverollActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moviment => m_Wrapper.m_Overoll_Moviment;
        public InputActionMap Get() { return m_Wrapper.m_Overoll; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OverollActions set) { return set.Get(); }
        public void AddCallbacks(IOverollActions instance)
        {
            if (instance == null || m_Wrapper.m_OverollActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OverollActionsCallbackInterfaces.Add(instance);
            @Moviment.started += instance.OnMoviment;
            @Moviment.performed += instance.OnMoviment;
            @Moviment.canceled += instance.OnMoviment;
        }

        private void UnregisterCallbacks(IOverollActions instance)
        {
            @Moviment.started -= instance.OnMoviment;
            @Moviment.performed -= instance.OnMoviment;
            @Moviment.canceled -= instance.OnMoviment;
        }

        public void RemoveCallbacks(IOverollActions instance)
        {
            if (m_Wrapper.m_OverollActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOverollActions instance)
        {
            foreach (var item in m_Wrapper.m_OverollActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OverollActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OverollActions @Overoll => new OverollActions(this);
    public interface IOverollActions
    {
        void OnMoviment(InputAction.CallbackContext context);
    }
}
